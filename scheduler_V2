#include <io.h>
#include <io.c>
#include <bit.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>

//=====Global variables=====
unsigned char red_val = 0x00; //if column_sel == 0x00, 0xFF will turn on red
unsigned char green_val = 0xFF;
unsigned char blue_val = 0xFF;
unsigned char column_sel = 0x00; // grounds column to display pattern
unsigned long output = 0;
unsigned char ctrlReset;
unsigned char ctrlStrobe;
unsigned short channel[7] = {0};
//=========================

volatile unsigned char TimerFlag = 0; // TimerISR() sets this to 1. C programmer should clear to 0.

// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B = 0x0B;// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A = 125;	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK1 = 0x02; // bit1: OCIE1A -- enables compare match interrupt

	//Initialize avr counter
	TCNT1=0;

	_avr_timer_cntcurr = _avr_timer_M;
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
	// ADEN: setting this bit enables analog-to-digital conversion.
	// ADSC: setting this bit starts the first conversion.
	// ADATE: setting this bit enables auto-triggering. Since we are
	//        in Free Running Mode, a new conversion will trigger whenever
	//        the previous conversion completes.
}

typedef struct _task {
	signed char state;
	unsigned long int period;
	unsigned long int elapsedTime;
	int (*TickFct)(int);
} task;

task tasks[2];

const unsigned char tasksNum = 2;
const unsigned long tasksPeriodGCD = 1;
const unsigned long periodReadTick = 1;
const unsigned long periodDisplay = 1;

//=====SM state declaration=====
enum CH1_States {sm1_display};
int writeChannel0(int state);

enum read_states{Init, read, store, high, low};
int Read_Tick_Right(int state);
//==============================

//=====Helper functions=====
void transmit_data(unsigned long data) {
	int i;
	for (i = 0; i < 32 ; ++i) {
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		PORTD = 0x08;
		// set SER = next bit of data to be sent.
		PORTD |= ((data >> i) & 0x01);
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		PORTD |= 0x02;
	}
	// set RCLK = 1. Rising edge copies data from “Shift” register to “Storage” register
	PORTD |= 0x04;
	// clears all lines in preparation of a new transmission
	PORTD = 0x00;
}
//=========================

int main()
{
	DDRB = 0xFF; // Set port B to output
	PORTB = 0x00; // Init port B to 0s
	DDRD = 0xFF; PORTD = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
	
	ADC_init();//initializes ADC
	
	unsigned char i = 0;
	
	//=======Task initialization========
	tasks[i].state = Init;
	tasks[i].period = periodReadTick;
	tasks[i].elapsedTime = tasks[i].period;
	tasks[i].TickFct = &Read_Tick_Right;
	++i;
	tasks[i].state = sm1_display;
	tasks[i].period = periodDisplay;
	tasks[i].elapsedTime = tasks[i].period;
	tasks[i].TickFct = &writeChannel0;
	//==================================
	
	TimerSet(tasksPeriodGCD);
	TimerOn();
	
	while(1) {
		unsigned char i;
		for (i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
			if ( tasks[i].elapsedTime >= tasks[i].period ) { // Ready
				tasks[i].state = tasks[i].TickFct(tasks[i].state);
				tasks[i].elapsedTime = 0;
			}
			tasks[i].elapsedTime += tasksPeriodGCD;
		}
		
		while(!TimerFlag);
		TimerFlag = 0;
	}
	return 0;
}

//========SMS========
//===================
int Read_Tick_Right(int state)
{
	unsigned char i = 0;
	switch(state)
	{
		case Init:
		state = high;
		break;
		
		case high:
		state = low;
		break;
		
		case low:
		state = read;
		break;
		
		case read:
		state = store;
		break;
		
		case store:
		if(i < 7)
		{
			state = read;
		}
		else
		{
			state = Init;
		}
	}
	switch(state)
	{
		case Init:
		ctrlReset = 0x00;
		ctrlStrobe = 0x02;
		i = 0;
		break;
		
		case low:
		ctrlReset = 0x01;
		break;
		
		case high:
		ctrlReset = 0x00;
		break;
		
		case read:
		ctrlStrobe = 0x02;
		break;
		
		case store:
		ctrlStrobe = 0x00;
		channel[i] = ADC;
// 		//Filter out any remaining noise
// 		if(channel[i] < 8)
// 		{
// 			channel[i] = 0;
// 		}
		++i;
		break;
	}
	PORTB = channel[6]; //FIXME
	PORTC = ctrlStrobe | ctrlReset;
	return state;
}

int writeChannel0(int state) {
	// === Transitions ===
	switch (state) {
		case sm1_display: break;
		default: state = sm1_display;
		break;
	}

	// === Actions ===
	//colors are vertical values
	switch (state) {
		case sm1_display: 
		if(channel[4] <= 1024 && channel[4] >= 905)
		{
			red_val = 0xFF; //1111 1111
			green_val = 0x7F;//0111 1111
			blue_val = 0xFF; // 1111 1111
			column_sel = 0xFF; //1111 1111
		}
	else if(channel[4] <= 904 && channel[4] >= 786)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1110
		column_sel = 0xFE; //1111 1110
	}
	else if(channel[4] <= 904 && channel[4] >= 786)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0xFC; //1111 1100
	}
	else if(channel[4] <= 785 && channel[4] >= 667)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0xF8; //1111 1000
	}
	else if(channel[4] <= 666 && channel[4] >= 549)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0xF0; //1111 0000
	}
	else if(channel[4] <= 548 && channel[4] >= 429)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0xE0; //1110 0000
	}
	else if(channel[4] <= 428 && channel[4] >= 310)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0xC0; //1100 0000
	}
	else if(channel[4] <= 309 && channel[4] >= 191)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0x80; //1000 0000
	}
	else if(channel[4] <= 190 && channel[4] >= 0)
	{
		red_val = 0xFF; //1000 0000
		green_val = 0x7F;//0111 1111
		blue_val = 0xFF; //1111 1111
		column_sel = 0x00; //0000 0000
	}
		break;
		default: break;
	}
	
	output = ((unsigned long)column_sel << 24 | (unsigned long)green_val << 16);
	output |= ((unsigned long)blue_val << 8 | (unsigned long)red_val);
	
	transmit_data(output);
	return state;
};
